package com.arc.paddleRoyale{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.paddleRoyale.view.cluster.ClusterView;	import com.arc.paddleRoyale.view.playerFocus.PlayerFocusView;	import com.arc.paddleRoyale.view.playerStats.PlayersStatsView;	import com.arc.paddleRoyale.view.shells.AgencyShellView;	import com.arc.paddleRoyale.view.shells.ShellsView;	import com.arc.paddleRoyale.vo.Agency;	import com.arc.paddleRoyale.vo.Constants;	import com.arc.paddleRoyale.vo.FlashVars;	import com.arc.utils.ClassUtils;	import com.arc.utils.DisplayUtils;	import com.carlcalderon.arthropod.Debug;	import com.greensock.TweenMax;	import com.greensock.layout.ScaleMode;	import com.reintroducing.layout.Grid;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.system.Capabilities;	import flash.ui.Keyboard;	import flash.utils.Timer;		public class PaddleRoyaleVisualApp extends Sprite	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.PaddleRoyaleVisualApp";				// Cycle view		public	var views:Array;		public	var clusterDefaultX:Number;		public	var cycleViewCounter:int = 0;		public	var cycleViewTime:Number = 15; // in seconds		public	var cycleViewTimer:Timer;				// DisplayObjects		public	var breaker:MovieClip;		public	var clusterView:ClusterView;		public	var playerFocusView:PlayerFocusView;		public	var playersStatsView:PlayersStatsView;		public	var shellsView:ShellsView;				// Base resolution		public const defaultResolution:Object = {width: 1024, height: 768};						/*--------------------------------------------------------------------------------------------------------		Constructors--------------------------------------------------------------------------------------------------------*/		public function PaddleRoyaleVisualApp()		{			super();			Debug.log(DEFAULT_NAME.concat(".PaddleRoyaleVisualApp()"));			Debug.log("Capabilities.playerType: ".concat(Capabilities.playerType));						FlashVars.declare(loaderInfo.parameters);						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			loaderInfo.addEventListener(Event.COMPLETE, onComplete);		}					/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		private function init():void		{			App.instance.assignView(this);									/////////////////////////////////////////////			// Create ClusterView			/////////////////////////////////////////////			clusterView				= new ClusterView();			addChild(clusterView);									/////////////////////////////////////////////			// Create PlayerFocusView			/////////////////////////////////////////////			playerFocusView			= new PlayerFocusView();			playerFocusView.name	= "playerFocusView";			addChild(playerFocusView);									/////////////////////////////////////////////			// Create PlayersStatsView			/////////////////////////////////////////////			playersStatsView		= new PlayersStatsView();			playersStatsView.name	= "playersStatsView_mc";			addChild(playersStatsView);						/////////////////////////////////////////////			// Create ShellsView			/////////////////////////////////////////////			//shellsView 				= new ShellsView();			//shellsView.name			= "shellsView_mc";			//addChild(shellsView);									/////////////////////////////////////////////			// Setup views array for cycling			/////////////////////////////////////////////			//views 					= new Array(clusterView, shellsView, playersStatsView);									/////////////////////////////////////////////			// Setup timer			/////////////////////////////////////////////			//cycleViewTimer 			= new Timer(Constants.CYCLE_VIEW_TIME);			//cycleViewTimer.addEventListener(TimerEvent.TIMER, onCycleViewTimer);			//cycleViewTimer.start();			//onCycleViewTimer(null);						// Setup layering			DisplayUtils.bringToTop(breaker);			DisplayUtils.bringToTop(playersStatsView);			DisplayUtils.bringToTop(playerFocusView);			DisplayUtils.bringToBottom(clusterView);						// Not using timer			playersStatsView.x		= 0;			playersStatsView.y		= 100;			clusterDefaultX			=			clusterView.x			= 292;			clusterView.y			= 0;						// Place things properly			onStageResize(null);		}				private function toggleFullscreen():void		{			Debug.warning("toggleFullscreen()");			Debug.warning("stage.displayState: ".concat(stage.displayState));						var fs:String			= StageDisplayState.FULL_SCREEN_INTERACTIVE;						var nds:String			= stage.displayState != fs ? fs : StageDisplayState.NORMAL;			Debug.warning("nds: ".concat(nds));									try			{				stage.displayState		= nds;			}			catch(e:Error)			{				Debug.error(e);			}			Debug.warning("stage.displayState: ".concat(stage.displayState));		}		private function onCycleViewTimer(event:TimerEvent):void		{			cycleViews();		}				private function cycleViews():void		{			setMainView(views[cycleViewCounter] as Sprite);			cycleViewCounter 		= (cycleViewCounter == (views.length - 1)) ? 0 : cycleViewCounter + 1 ;		}				private function setMainView($sprite:Sprite):void		{			var processedOrder:Array = new Array(clusterView, shellsView, playersStatsView); // Values are just sample			var processedValues:Array			// Usage			// processedValues		= [topLeft:Sprite, mainView:Sprite, bottomLeft:Sprite];						// Positions array clockwise			// [0] - Top Left view			// [1] - Main view			// [2] - Bottom Left view						// Starting positions			// shells			//			cluster			// players						// positions: cluster			var clusterSet:Array	= new Array();			clusterSet[0]			= ({x: -18, 	y: 20, 		scale: .45});			clusterSet[1]			= ({x: 292, 	y: 0, 		scale: 1});			clusterSet[2]			= ({x: -18, 	y: 405, 	scale: .45});						// positions: playersStats			var playersSet:Array		= new Array();			playersSet[0]			= ({x: 30, 		y: 100, 	scale: .45});			playersSet[1]			= ({x: 430, 	y: 125, 	scale: 1});			playersSet[2]			= ({x: 30, 		y: 450, 	scale: .45});						// positions: shells			var shellsSet:Array		= new Array();			shellsSet[0]			= ({x: 50, 		y: 40, 	scale: .45});			shellsSet[1]			= ({x: 430, 	y: 125, 	scale: 1});			shellsSet[2]			= ({x: 50, 		y: 425, 	scale: .45});						switch($sprite)			{				case clusterView:					processedOrder	= new Array(shellsView, clusterView, playersStatsView);					processedValues = new Array(shellsSet[0], clusterSet[1], playersSet[2]);					break;								case playersStatsView:					processedOrder	= new Array(clusterView, playersStatsView, shellsView);					processedValues = new Array(clusterSet[0], playersSet[1], shellsSet[2]);					break;								case shellsView:					processedOrder	= new Array(playersStatsView, shellsView, clusterView);					processedValues = new Array(playersSet[0], shellsSet[1], clusterSet[2]);					break;								default: break;			}						for(var i:int = 0 ; i < processedOrder.length ; i++)			{				var s:Sprite		= processedOrder[i] as Sprite;				TweenMax.to(s, .5, {x: processedValues[i].x, y: processedValues[i].y, scaleX: processedValues[i].scale, scaleY: processedValues[i].scale});				// Set focus properly				try				{					s['focus'] = i == 1;				}				catch(e:Error)				{					trace('could not set focus on '.concat(s.name));				}							}		}						/*--------------------------------------------------------------------------------------------------------		Functions - Event listeners--------------------------------------------------------------------------------------------------------*/		private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						stage.addEventListener(Event.RESIZE, onStageResize);						// Setup stage			stage.align 		= StageAlign.TOP_LEFT;			stage.scaleMode 	= StageScaleMode.NO_SCALE;						stage.addEventListener(MouseEvent.CLICK, onMouseClick);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyboardEvent);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullScreen);						if(FlashVars.vars.goFullscreen == "true")			{				toggleFullscreen();			}		}				private function onComplete(event:Event):void		{			loaderInfo.removeEventListener(Event.COMPLETE, onComplete);			App.instance.addEventListener(AppEvent.LOAD_COMPLETE, onAppInitComplete);		}				private function onStageResize(event:Event):void		{			if(!stage || !clusterView) return;			/*			Debug.log("onStageResize(event:Event)");			Debug.log("defaultResolution.width: ".concat(defaultResolution.width));			Debug.log("stage.stageWidth: ".concat(stage.stageWidth));			*/						clusterView.x = clusterDefaultX + ( ( stage.stageWidth - defaultResolution.width ) / 2 );			clusterView.y = 0 + ( ( stage.stageHeight - defaultResolution.height ) / 2 );						breaker.y = stage.stageHeight / 2;			breaker.height = stage.stageHeight;		}				private function onAppInitComplete($e:AppEvent):void		{			//Debug.log(DEFAULT_NAME.concat(" :: ", "onAppInitComplete($e:AppEvent)"));			//Debug.log(DEFAULT_NAME.concat(" :: ", "agencyCount: ", App.instance.agencyCount));						if(!App.instance.firstLoad) return;			init();		}		private function onKeyboardEvent(event:KeyboardEvent):void		{			//Debug.log("onKeyboardEvent(event:KeyboardEvent)");			//Debug.log("event.keyCode: ".concat(event.keyCode));						switch(event.keyCode)			{				case Keyboard.SPACE:					//cycleViews();					//cycleViewTimer.stop();					break;								case Keyboard.R:					//cycleViewTimer.start();					break;								case Keyboard.F:					toggleFullscreen();					break;								default: break;			}		}				private function onFullScreen(event:FullScreenEvent):void		{					}		private function onMouseClick(event:MouseEvent):void		{			App.instance.load();		}	}}