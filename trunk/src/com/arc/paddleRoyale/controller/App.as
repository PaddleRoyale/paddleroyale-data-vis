package com.arc.paddleRoyale.controller{	import com.arc.paddleRoyale.PaddleRoyaleVisualApp;	import com.arc.paddleRoyale.controller.commands.LoadXML;	import com.arc.paddleRoyale.controller.commands.ParseXML;	import com.arc.paddleRoyale.model.AgencyEvent;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.paddleRoyale.model.AppModel;	import com.arc.paddleRoyale.vo.Agency;	import com.arc.paddleRoyale.vo.Constants;	import com.arc.paddleRoyale.vo.Player;	import com.carlcalderon.arthropod.Debug;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.system.Capabilities;	import flash.utils.Dictionary;	import flash.utils.Timer;
	public class App extends EventDispatcher	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.controller.App";		/*--------------------------------------------------------------------------------------------------------		SINGLETON - Start--------------------------------------------------------------------------------------------------------*/		private static var _instance:App;				public static function get instance():App		{			if( _instance == null ) _instance = new App( new SingletonEnforcer() );			return _instance;		}				public function App(pvt:SingletonEnforcer)		{			if(pvt == null) throw(new Error("Cannot instantiate App. Use App.instance"));			init();		}/*--------------------------------------------------------------------------------------------------------		SINGLETON - Stop--------------------------------------------------------------------------------------------------------*/						/*--------------------------------------------------------------------------------------------------------		Vars--------------------------------------------------------------------------------------------------------*/		private var _firstLoad:Boolean = true;		private var _loadCommand:LoadXML;		private var _model:AppModel;		private var _parseCommand:ParseXML;		private var _refreshRate:Number = 15; // In Seconds		private var _refreshTimer:Timer;		private var _view:PaddleRoyaleVisualApp;						/*--------------------------------------------------------------------------------------------------------		Agencies--------------------------------------------------------------------------------------------------------*/		public function get agencies():Dictionary		{			return _model.agencies;		}				public function get agencyCount():uint		{			return _model.agencyCount;		}				public function get agenciesStillIn():Dictionary		{			return _model.agenciesStillIn;		}				public function get agenciesStillInCount():uint { return _model.agenciesStillInCount; }				public function getAgencyByIndex($index:int):Agency		{			return _model.getAgencyByIndex($index);		}				public function getAgencyStillInAtIndex($index:int):Agency		{			return _model.getAgencyStillInAtIndex($index);		}				public function get firstLoad():Boolean		{			return _firstLoad;		}				/*--------------------------------------------------------------------------------------------------------		Players - Try not to call too often since theres multiple loops--------------------------------------------------------------------------------------------------------*/		public function get maxScore():int { return _model.maxScore; }		public function set maxScore($value:int):void { _model.maxScore = $value; }				public function get players():Dictionary		{			return _model.players;		}				public function get playerCount():int		{			return _model.playerCount;		}				public function get playerCountStillIn():int		{			return _model.playerCountStillIn;		}				public function getPlayerByIndex($index:int):Player		{			return _model.getPlayerByIndex($index);		}				public function getPlayerByName($name:String):Player		{			return _model.getPlayerByName($name);		}				public function get playersSortedByName():Array		{			return _model.playersSortedByName;		}				public function get knockedOutPlayersCountOnLoad():int		{			return _model.knockedOutPlayersCountOnLoad;		}		public function set knockedOutPlayersCountOnLoad($value:int):void		{			_model.knockedOutPlayersCountOnLoad = $value;		}						/*--------------------------------------------------------------------------------------------------------		View--------------------------------------------------------------------------------------------------------*/		public function assignView($view:PaddleRoyaleVisualApp):void		{			_view = $view;		}				/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		private function init():void		{			//Debug.log(DEFAULT_NAME.concat(" :: ", "init()"));							_model			= new AppModel();						// Load XML			_loadCommand	= new LoadXML();			_loadCommand.addEventListener(Event.COMPLETE, onLoadComplete);			_loadCommand.load();						// Parse XML			_parseCommand	= new ParseXML();			_parseCommand.addEventListener(AgencyEvent.ADD, onAgencyAdd);			_parseCommand.addEventListener(Event.COMPLETE, onParseComplete);						// Refresh timer			_refreshTimer	= new Timer(Constants.DATA_REFRESH_RATE);			_refreshTimer.addEventListener(TimerEvent.TIMER, onRefreshTimer);			_refreshTimer.start();		}				public function load():void		{			dispatchEvent(new AppEvent(AppEvent.LOAD_START));			knockedOutPlayersCountOnLoad = 0;			maxScore = 0;			_loadCommand.load();		}		private function onAgencyAdd($e:AgencyEvent):void		{			//Debug.log(DEFAULT_NAME.concat(" :: ", "onAgencyAdd($e:AgencyEvent)"));			_model.addAgency($e.agency);		}		private function onLoadComplete($e:Event):void		{			//Debug.log(DEFAULT_NAME.concat(" :: ", "onLoadComplete($e:Event)"));			//Debug.log($e.target.data);			_parseCommand.parse(new XML($e.target.data));		}				private function onParseComplete($e:Event):void		{			//Debug.log(DEFAULT_NAME.concat(" :: ", "onParseComplete($e:Event)"));			dispatchEvent(new AppEvent(AppEvent.LOAD_COMPLETE));			_firstLoad = false;		}				/*--------------------------------------------------------------------------------------------------------		Refresh Timer--------------------------------------------------------------------------------------------------------*/		private function onRefreshTimer(event:TimerEvent):void		{			load();		}	}}internal class SingletonEnforcer{}