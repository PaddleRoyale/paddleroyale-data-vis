package com.arc.paddleRoyale.controller.commands{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AgencyEvent;	import com.arc.paddleRoyale.vo.Agency;	import com.arc.paddleRoyale.vo.Player;	import com.carlcalderon.arthropod.Debug;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Dictionary;	import flash.utils.Timer;	public class ParseXML extends EventDispatcher	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.controller.commands.ParseXML";				private var xmlData:XML;				// Create a timer to slightly delay the load complete so player related views can update		private var _timer:Timer;				public function ParseXML()		{		}				public function parse($xmlData:XML)		{			dispatchEvent(new Event(Event.INIT));						xmlData = $xmlData;						// Integers for agency			var aI:int = 0;						// Integer for player			var pI:int = 0;						// Keep track of maxScore;			var maxScore:int = 0;						for each(var a:XML in xmlData..agency)			{					// Players for dictionary				var players:Dictionary = new Dictionary();				for each(var p:XML in a..player)				{					var player:Player = new Player(p.@id, pI, p.@firstName, p.@lastName, int(p.@score), p.@knockedOut == "true", aI);										players[player.id] = player;										// Increase max score if there is a new high;					App.instance.maxScore = player.score;										//Debug.log(player.toString());					pI++;				}				var agency:Agency = new Agency(a.@id, aI, a.@name, players);				//Debug.log(agency.toString());				dispatchEvent(new AgencyEvent(AgencyEvent.ADD, agency));				aI++;			}			delayComplete();		}				private function delayComplete():void		{			_timer = new Timer(250, 1);			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);			_timer.start();		}				private function onTimerComplete(e:TimerEvent):void		{			dispatchEvent(new Event(Event.COMPLETE));			_timer.stop();		}	}}