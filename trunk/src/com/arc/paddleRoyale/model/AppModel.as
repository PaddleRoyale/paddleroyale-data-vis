package com.arc.paddleRoyale.model{	import com.arc.paddleRoyale.vo.Agency;	import com.arc.paddleRoyale.vo.Player;	import com.arc.utils.ClassUtils;	import com.carlcalderon.arthropod.Debug;		import flash.utils.Dictionary;	public class AppModel	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.model.AppModel";						/*--------------------------------------------------------------------------------------------------------		Constructor--------------------------------------------------------------------------------------------------------*/		public function AppModel()		{					}						/*--------------------------------------------------------------------------------------------------------		GET/SET--------------------------------------------------------------------------------------------------------*/		private var _agencies:Dictionary = new Dictionary(true);		public function get agencies():Dictionary { return _agencies; }				public function get agencyCount():uint		{			return ClassUtils.getLength(agencies);		}				public function get agenciesStillIn():Dictionary		{			var d:Dictionary = new Dictionary(true);			for each(var a:Agency in agencies)			{				if(!a.knockedOut)				{					d[a.id] = a;				}			}			return d;		}				public function get agenciesStillInCount():uint		{			return ClassUtils.getLength(agenciesStillIn);		}				public function getAgencyStillInAtIndex($index:int):Agency		{			var i:int = 0;			for each(var a:Agency in agenciesStillIn)			{				if(i == $index) return a;				i++;			}			return a;		}				private var _maxScore:uint;		public function get maxScore():uint { return _maxScore; }		public function set maxScore($value:uint):void { if($value > _maxScore) _maxScore = $value; }				public function get playerCount():int		{			var i:int = 0;			for each(var p:Player in players)			{				i++;			}			return i;		}				public function get playerCountStillIn():int		{			var i:int = 0;			for each(var p:Player in players)			{				if(!p.knockedOut) i++;			}			return i;		}				public function get players():Dictionary		{			var ret:Dictionary = new Dictionary();			for each(var a:Agency in agencies)			{				for each(var p:Player in a.players)				{					ret[p.id] = p;				}			}			return ret;		}				public function get playersSortedByName():Array		{			var a:Array = new Array();			for each(var p:Player in players)			{				a.push(p.name);			}			a.sort(Array.CASEINSENSITIVE);			var aa:Array = new Array();			for each(var pn:String in a)			{				aa.push(getPlayerByName(pn));			}			return aa;		}				/**		 * Used to keep track of how many players got knocked out on the last load. Defined in App.mergePlayers		 */		private var _knockedOutPlayersCountOnLoad:int = 0;		public function get knockedOutPlayersCountOnLoad():int		{			return _knockedOutPlayersCountOnLoad;		}		public function set knockedOutPlayersCountOnLoad($value:int):void		{			_knockedOutPlayersCountOnLoad = $value;		}						/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		public function addAgency($agency:Agency):void		{			if(_agencies.hasOwnProperty($agency.id))			{				// Agency does exist. Handle merging player data in another function				mergePlayers(_agencies[$agency.id], $agency.players);			}			else			{				// Agency doesn't exist				_agencies[$agency.id] 	= $agency;				for each(var p:Player in $agency.players)				{					if(p.knockedOut) _knockedOutPlayersCountOnLoad++;				}			}			//Debug.log($agency.toString());		}				public function getAgencyByIndex($index:int):Agency		{			var agency:Agency;			for each(var a:Agency in agencies)			{				if(a.index == $index)				{					agency = a;					break;				}			}			return agency;		}				public function getPlayerByIndex($index:int):Player		{			for each( var p:Player in players)			{				if(p.index == $index) return p;			}			return null;		}				public function getPlayerByName($name:String):Player		{			for each( var p:Player in players)			{				if(p.name == $name) return p;			}			return null;		}				private function mergePlayers($agency:Agency, $players:Dictionary):void		{			//Debug.log(DEFAULT_NAME.concat(".", "mergePlayers($agency:Agency, $players:Dictionary)"));			for each(var p:Player in $players)			{				if(!$agency.players[p.id].knockedOut && p.knockedOut ) _knockedOutPlayersCountOnLoad++;				Player($agency.players[p.id]).merge(p);			}					}	}}