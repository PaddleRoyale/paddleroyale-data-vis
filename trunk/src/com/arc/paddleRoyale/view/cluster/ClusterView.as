package com.arc.paddleRoyale.view.cluster{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.paddleRoyale.view.IView;	import com.arc.paddleRoyale.view.cluster.ClusterItem;	import com.arc.paddleRoyale.vo.Constants;	import com.carlcalderon.arthropod.Debug;	import com.greensock.TweenMax;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.getTimer;		import gravity.GravityRadial;		import wck.WCK;	import wck.World;		public class ClusterView extends WCK implements IView	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.PaddleRoyaleVisualApp";								/*--------------------------------------------------------------------------------------------------------		VARS - Box2D--------------------------------------------------------------------------------------------------------*/				// world mouse position		static public var mouseXWorldPhys:Number;		static public var mouseYWorldPhys:Number;		static public var mouseXWorld:Number;		static public var mouseYWorld:Number;		public var world:World;						/*--------------------------------------------------------------------------------------------------------		Getter/Setters--------------------------------------------------------------------------------------------------------*/		private var _focus:Boolean = false;		public function get focus():Boolean		{			return _focus;		}		public function set focus($value:Boolean):void		{			_focus = $value;			update();		}								/*--------------------------------------------------------------------------------------------------------		Constructors--------------------------------------------------------------------------------------------------------*/		public function ClusterView()		{			super();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}								/*--------------------------------------------------------------------------------------------------------		Event listeners--------------------------------------------------------------------------------------------------------*/		private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAppInitComplete(event:AppEvent):void		{			App.instance.removeEventListener(AppEvent.LOAD_COMPLETE, onAppInitComplete);		}				private function onMouseClick(event:MouseEvent):void		{			//world.gravity_mc.x						= mouseX;			//world.gravity_mc.y						= mouseY;												/*			var radius:Number					= 10;			var force:Number 					= .25;						var mx:Number						= (mouseX) / Constants.PHYSICS_SCALE;			var my:Number						= (mouseY) / Constants.PHYSICS_SCALE;			physExplosion(new Point(mx,my), radius, force);			*/		}										/*--------------------------------------------------------------------------------------------------------		Update--------------------------------------------------------------------------------------------------------*/		public function update():void		{					}										/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		/**		 *		 * @param	locationPnt Application point of the explosion		 * @param	nRadius Radius of the explosion in pixels		 * @param	nForce Force of explosion		 */		private function physExplosion(locationPnt:Point, nRadius:Number, nForce:Number) : void		{				Debug.log(DEFAULT_NAME.concat(" :: ", "physExplosion(", locationPnt, ", ", nRadius, ", ", nForce, ")"));			/*			var Sector:b2AABB					= new b2AABB();			Sector.lowerBound.Set(locationPnt.x - nRadius, locationPnt.y - nRadius);			Sector.upperBound.Set(locationPnt.x + nRadius, locationPnt.y + nRadius);			//Debug.log(DEFAULT_NAME.concat(" :: ", "found Sector"));						var k_bufferSize:Number 			= 99;			var buffer:Array 					= new Array(k_bufferSize);			var count:int 						= world.Query(Sector, buffer, k_bufferSize);			//Debug.log(DEFAULT_NAME.concat(" :: ", "found count: ", count));						for (var i:int = 0; i < count; i++)			{				var Body:b2Body 				= buffer[i].GetBody();				var BodyPos:b2Vec2 				= Body.GetWorldCenter();				var HitVector:b2Vec2 			= new b2Vec2(BodyPos.x - locationPnt.x, BodyPos.y - locationPnt.y);				var Distance 					= HitVector.Normalize(); //Makes a 1 unit length vector from HitVector								if ((Body.IsDynamic()) && (Distance <= nRadius))				{					//TODO: This is linear, but that's not realistic.					var HitForce:Number			= (nRadius - Distance) * nForce;					HitVector.x					*= HitForce;					HitVector.y					*= HitForce;					//Body.ApplyImpulse(HitForce * HitVector, Body.GetWorldCenter());					Body.ApplyImpulse(HitVector, Body.GetWorldCenter());				};			}			*/		}	}}