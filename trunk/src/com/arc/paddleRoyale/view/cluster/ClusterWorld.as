package com.arc.paddleRoyale.view.cluster{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.utils.DisplayUtils;	import com.carlcalderon.arthropod.Debug;	import com.greensock.TweenMax;	import com.greensock.easing.*;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Matrix;	import flash.text.TextFormat;	import flash.utils.Timer;		import shapes.Circle;		import wck.World;
		public class ClusterWorld extends World	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.view.cluster.ClusterWorld";								/*--------------------------------------------------------------------------------------------------------		Vars--------------------------------------------------------------------------------------------------------*/		public var sp1:Circle;		public var sp2:Circle;		public var sp3:Circle;		public var sp4:Circle;		public var sp5:Circle;		public var sp6:Circle;		public var sp7:Circle;		public var sp8:Circle;		public var sp9:Circle;		public var sp10:Circle;		public var sp11:Circle;		public var sp12:Circle;		public var sp13:Circle;		public var sp14:Circle;		public var sp15:Circle;		public var gravity_mc:ClusterGravity;		public var prev:ClusterItem;		private var _agencyFocusTimer:Timer = new Timer(20 * 1000);		private var _agencyFocusI:int = 0;		private var _clusterCompleteCount:int = 0;								/*--------------------------------------------------------------------------------------------------------		GETTER/SETTER--------------------------------------------------------------------------------------------------------*/		private function get circles():Vector.<ClusterItem>		{			var a:Vector.<ClusterItem> = new Vector.<ClusterItem>();			var i:int = 1;			while(hasOwnProperty("sp".concat(i)))			{				a.push(this['sp'.concat(i)] as Circle);				i++;			}			return a;		}						/*--------------------------------------------------------------------------------------------------------		Constructor--------------------------------------------------------------------------------------------------------*/		public function ClusterWorld()		{			super();			addEventListener(MouseEvent.CLICK, onMouseEvent);			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						this.cacheAsBitmap = true;						//this.gravityX = 0;			//this.gravityY = 1;						//listenToClusterItems();		}						/*--------------------------------------------------------------------------------------------------------		Event Listeners--------------------------------------------------------------------------------------------------------*/		private function onAddedToStage(event:Event):void		{			//Debug.log(DEFAULT_NAME.concat(".onAddedToStage(e:AppEvent)"));						removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						this.gravityX = 0;			this.gravityY = 1;						listenToClusterItems();		}		private function onAgencyFocusTimer(event:TimerEvent):void		{			updateAgencyInFocus();		}		private function onMouseEvent($e:MouseEvent):void		{			switch($e.type)			{				case MouseEvent.CLICK:					// Reset prev					if(prev != null && prev != $e.target)					{						prev.compress();					}					var cur:ClusterItem	= $e.target as ClusterItem;					cur.expand();					prev				= cur;					break;								default: break;			}		}				private function onClusterItemReady(event:Event):void		{			_clusterCompleteCount++;			if(_clusterCompleteCount == circles.length)			{				cleanAgencies();				startAgencyFocus();			}		}						/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		private function cleanAgencies():void		{			var limit:int = circles.length;			for( var i:int = 0 ; i < limit ; i++ )			{				if(i < App.instance.agencyCount)				{					// Valid agency found					circles[i].agency = App.instance.getAgencyByIndex(i);				}				else				{					// No agency, remoce circle					circles[i].kill();				}			}		}				private function listenToClusterItems():void		{			for each(var c:ClusterItem in circles)			{				c.addEventListener(Event.COMPLETE, onClusterItemReady);			}		}				private function startAgencyFocus():void		{			// Setup timer and start			_agencyFocusTimer.addEventListener(TimerEvent.TIMER, onAgencyFocusTimer);			_agencyFocusTimer.start();			onAgencyFocusTimer(null);		}				public function updateAgencyInFocus():void		{			Debug.log(DEFAULT_NAME.concat(".updateAgencyInFocus()"));			Debug.log("Agencies still in: ".concat(App.instance.agenciesStillInCount));			Debug.log("_agencyFocusI: ".concat(_agencyFocusI));						if(prev != null) prev.compress();						switch(App.instance.agenciesStillInCount)			{				case 1:					_agencyFocusI = 0;					_agencyFocusTimer.stop();					break;								case 0:					break;								default:					prev = App.instance.getAgencyStillInAtIndex(_agencyFocusI).clusterItem;					prev.expand();										if(_agencyFocusI >= App.instance.agenciesStillInCount - 1)					{						// Reset if we're at the end						_agencyFocusI = 0;					}					else					{						_agencyFocusI++;					}										break;			}		}						private function randomNumber(low:Number=0, high:Number=1):Number		{			return Math.floor(Math.random() * (1+high-low)) + low;		}	}}