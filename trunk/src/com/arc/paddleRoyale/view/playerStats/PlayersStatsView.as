package com.arc.paddleRoyale.view.playerStats{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.paddleRoyale.model.EventCenter;	import com.arc.paddleRoyale.view.IView;	import com.arc.paddleRoyale.vo.Player;	import com.arc.utils.ClassUtils;	import com.carlcalderon.arthropod.Debug;	import com.greensock.TweenMax;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;		public class PlayersStatsView extends Sprite implements IView	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.view.playerStats.PlayersStatsView";/*--------------------------------------------------------------------------------------------------------		Vars--------------------------------------------------------------------------------------------------------*/		public	var container:Sprite;		public	var playersStatsMask:Sprite;		public	var playerHeight:int 	= 25;		private	var _killCount:int 		= 0;		private var _tweenCount:int		= 0;		private var _scrollTimer:Timer	= new Timer(2 * 1000);						/*--------------------------------------------------------------------------------------------------------		Getter/Setters--------------------------------------------------------------------------------------------------------*/		private var _focus:Boolean = false;		public function get focus():Boolean		{			return _focus;		}		public function set focus($value:Boolean):void		{			_focus = $value;			update();		}						/*--------------------------------------------------------------------------------------------------------		Constructors--------------------------------------------------------------------------------------------------------*/		public function PlayersStatsView()		{			super();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						App.instance.addEventListener(AppEvent.LOAD_START, onAppLoadStart);			App.instance.addEventListener(AppEvent.LOAD_COMPLETE, onAppLoadComplete);			EventCenter.addEventListener(AppEvent.PLAYER_STATS_VIEW_REMOVED, onPlayerStatsRemoved);			// Setup timer			_scrollTimer.addEventListener(TimerEvent.TIMER, onScrollTimer);		}						/*--------------------------------------------------------------------------------------------------------		Event Listeners--------------------------------------------------------------------------------------------------------*/		private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						stage.addEventListener(Event.RESIZE, onStageResize);						init();		}				private function onStageResize(event:Event):void		{			playersStatsMask.height = stage.stageHeight - y - (playersStatsMask.y * 2);		}				private function onAppLoadStart(event:AppEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".onAppLoadStart(event:AppEvent)"));			_killCount = 0;		}				private function onAppLoadComplete(event:AppEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".onAppLoadComplete(event:AppEvent)"));			//Debug.log("knockedOutPlayersCountOnLoad: ".concat(App.instance.knockedOutPlayersCountOnLoad));			//update();		}				private function onPlayerStatsRemoved(event:AppEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".onPlayerStatsRemoved(event:AppEvent)"));			//Debug.log("killCount: ".concat(_killCount));						_killCount++;						checkKillCount();		}						/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		private function checkKillCount():void		{			if(_killCount == App.instance.knockedOutPlayersCountOnLoad)			{				update();			}		}				private function init():void		{			Debug.log(DEFAULT_NAME.concat(".init()"));			Debug.log("playerCount: ".concat(ClassUtils.getLength(App.instance.players)));						// Container for PlayersStatsItem(s)			container 		= new Sprite();			container.x		= playersStatsMask.x;			container.y		= playersStatsMask.y;			addChild(container);			container.mask	= playersStatsMask;						// Add instances of PlayersStatsItem			var i:int		= 0;			for each(var p:Player in App.instance.playersSortedByName)			{				var py:int 	= i * playerHeight;				var psi:PlayersStatsItem = new PlayersStatsItem();				psi.player	= p;				psi.y		= py;				container.addChild(psi);				i++;			}		}				public function update():void		{			stopScrolling();			/*			// If you need to change settings when it is in focus or not			if(focus)			{							}			else			{							}			*/			_tweenCount = 0;			// Reorder movieclips now that the playersStatsItems have removed themselves if they're knocked out			for(var i:int = 0 ; i < container.numChildren ; i++ )			{				var psi:PlayersStatsItem = container.getChildAt(i) as PlayersStatsItem;				//psi.y		= i * playerHeight;				var ny:int	= i * playerHeight;				TweenMax.to(psi, .25, { y: ny, delay: i * .05, onComplete: onPlayerTweenComplete });			}		}				private function onPlayerTweenComplete():void		{			_tweenCount ++;						if(_tweenCount == container.numChildren)			{				Debug.log(DEFAULT_NAME.concat(" AllPlayersFinishedTweening"));				//focusPlayer();				resumeScrolling();			}		}						/*--------------------------------------------------------------------------------------------------------		Scroll--------------------------------------------------------------------------------------------------------*/		private function onScrollTimer(event:TimerEvent):void		{			scroll();		}				private function stopScrolling():void		{			_scrollTimer.stop();		}				private function resumeScrolling():void		{			_scrollTimer.reset();			_scrollTimer.start();		}				private function scroll():void		{			var shouldScroll:Boolean	= container.height > playersStatsMask.height;			var $y:int 					= shouldScroll ? container.y - playerHeight : playersStatsMask.y;						if(shouldScroll)			{				var cInMask:int			= container.height + container.y;								$y						= cInMask < playersStatsMask.height ? playersStatsMask.y : $y;			}			else			{				stopScrolling();				$y						= playersStatsMask.y;			}						TweenMax.to(container, .5, { y: $y });		}				private function pauseScrolling():void		{					}	}}