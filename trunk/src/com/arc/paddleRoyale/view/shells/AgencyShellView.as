package com.arc.paddleRoyale.view.shells{	import com.arc.paddleRoyale.controller.App;	import com.arc.paddleRoyale.model.AgencyEvent;	import com.arc.paddleRoyale.model.AppEvent;	import com.arc.paddleRoyale.model.PlayerEvent;	import com.arc.paddleRoyale.vo.Agency;	import com.arc.paddleRoyale.vo.Colors;	import com.arc.paddleRoyale.vo.Constants;	import com.arc.paddleRoyale.vo.Player;	import com.arc.utils.DisplayUtils;	import com.carlcalderon.arthropod.Debug;	import com.greensock.TweenMax;		import fl.motion.Color;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.text.TextField;	import flash.utils.Dictionary;
		public class AgencyShellView extends Sprite	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.view.shells.AgencyShellView";				// DisplayObjects		public var circle:Sprite;		public var shell:MovieClip;		public var slicesContainer:Sprite;		public var slices:Sprite;		public var txt:TextField;				// Vars		public var agencyID:String;				/*--------------------------------------------------------------------------------------------------------		GET/SET--------------------------------------------------------------------------------------------------------*/		public function get agency():Agency		{			return App.instance.agencies[agencyID];		}		public function get players():Dictionary		{			return agency.players;		}				/*--------------------------------------------------------------------------------------------------------		COLORS--------------------------------------------------------------------------------------------------------*/		public function get primaryColor():int		{			return agency.primaryColor;		}				public function get gradientColors():Array		{			return agency.gradientColors;		}				/*--------------------------------------------------------------------------------------------------------		Constructor--------------------------------------------------------------------------------------------------------*/		public function AgencyShellView():void		{			super();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/				private function checkIfKnockedOut():void		{			if(agency.knockedOut)			{				TweenMax.to(this, .5, {colorTransform: Constants.KNOCKED_OUT_COLOR_TRANSFORM});			}		}						/*--------------------------------------------------------------------------------------------------------		Event Listener--------------------------------------------------------------------------------------------------------*/		private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			App.instance.addEventListener(AppEvent.LOAD_COMPLETE, onLoadComplete);		}				private function onLoadComplete($e:AppEvent):void		{			if(App.instance.firstLoad) return;			updateSlices();		}				private function onAgencyEvent($e:AgencyEvent):void		{			//Debug.log(DEFAULT_NAME.concat('onAgencyEvent($e:AgencyEvent)'));						switch($e.type)			{				case AgencyEvent.KNOCKED_OUT:					checkIfKnockedOut();					break;								default: break;			}		}				private function onPlayerKnockedOut($e:PlayerEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".onPlayerKnockedOut($e:PlayerEvent)"));			//updateSlices();		}				private function onPlayerUpdate($e:PlayerEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".onPlayerUpdate($e:PlayerEvent)"));			//updateSlices();		}						/*--------------------------------------------------------------------------------------------------------		Agency--------------------------------------------------------------------------------------------------------*/		public function assignAgencyID($agencyID:String):void		{			agencyID 						= $agencyID;						// Assign shell			agency.shellView				= this;						// Update txt			txt.text 						= agency.name;			var c:Color 					= new Color();			c.setTint(primaryColor, 1);			txt.transform.colorTransform 	= c;			txt.y							= Math.round(0 - (txt.textHeight/2)) - 3;						// Draw inner circle			circle							= new Sprite();			var circleRadius:int			= 55;			var lineWidth:int				= 5;			circle.alpha					= 1;			circle.graphics.lineStyle(lineWidth, primaryColor, 1);			circle.graphics.beginFill(0x000000);			circle.graphics.drawCircle(0,0,circleRadius);			circle.graphics.endFill();			addChild(circle);						// Slices container			slicesContainer					= new Sprite();			shell.addChild(slicesContainer);						updateSlices();						// Grab players, add listeners			for each(var p:Player in players)			{				p.addEventListener(PlayerEvent.KNOCKED_OUT, onPlayerKnockedOut);				p.addEventListener(PlayerEvent.UPDATE, onPlayerUpdate);			}						// Add listener for knocked out			agency.addEventListener(AgencyEvent.KNOCKED_OUT, onAgencyEvent);			checkIfKnockedOut();		}				private function updateDisplayOrder():void		{			DisplayUtils.bringToTop(circle);			DisplayUtils.bringToTop(txt);			DisplayUtils.bringToBottom(shell);		}						/*--------------------------------------------------------------------------------------------------------		Players--------------------------------------------------------------------------------------------------------*/		private function updateSlices():void		{			//Debug.log(DEFAULT_NAME.concat(".updateSlices()"));						// Remove previous slices			//Debug.log("removed previous slices: ".concat(removeChild(slices)));			for (var i:int = 0 ; i < slicesContainer.numChildren ;  i++)			{				var oldSlices:Sprite 	= slicesContainer.getChildAt(i) as Sprite;				hideShowSlice(oldSlices, false, agency.index * .1);			}			// Create new			slices 						= slicesContainer.addChild(new Sprite()) as Sprite;			slices.rotation				= -90;			updateDisplayOrder();			DisplayUtils.createShell(slices, agency.index, agency.playerScores);						hideShowSlice(slices, true, agency.index * .2);		}				private function hideShowSlice($slices:Sprite, $show:Boolean, $delay:Number):void		{			var s:Number				= $show ? 1 : .1 ;			for(var i:int = 0 ; i < $slices.numChildren ; i++)			{				var slice:Sprite		= $slices.getChildAt(i) as Sprite;				var params:Object		= new Object();				params.scaleX			= s;				params.scaleY			= s;				params.delay			= $delay + (.1 * i);								TweenMax.killTweensOf(slice);								// Special cases				if(!$show)				{					// Old slices					if(i == $slices.numChildren - 1) 					{						// Last slice						params.onComplete	= $slices.parent.removeChild;						params.onCompleteParams = [$slices];					}					else					{						// Other Slices						params.onComplete	= $slices.removeChild;						params.onCompleteParams = [slice];					}										//params.rotation		= slice.rotation - 90;				}				else				{					// New slices					slice.scaleX		=					slice.scaleY		= .1;					slice.rotation		= slice.rotation + 90;					params.rotation		= slice.rotation;				}				TweenMax.to(slice, .25, params);			}		}	}}