package com.arc.paddleRoyale.vo{	import com.arc.paddleRoyale.model.AgencyEvent;	import com.arc.paddleRoyale.model.EventCenter;	import com.arc.paddleRoyale.model.PlayerEvent;	import com.arc.paddleRoyale.view.cluster.ClusterItem;	import com.arc.paddleRoyale.view.shells.AgencyShellView;	import com.carlcalderon.arthropod.Debug;		import flash.events.EventDispatcher;	import flash.utils.Dictionary;
	public class Agency extends EventDispatcher	{		public static const DEFAULT_NAME:String = "com.arc.paddleRoyale.vo.Agency";						/*--------------------------------------------------------------------------------------------------------		GET/SET--------------------------------------------------------------------------------------------------------*/		private var _knockedOutDispatched:Boolean = false;		public function get knockedOut():Boolean		{			return playerScores.length == 0;		}				private var _id:String = "";		public function get id():String		{ 			return _id; 		}				private var _index:int = 0;		public function get index():int		{ 			return _index; 		}				private var _name:String = "";		public function get name():String 		{			return _name; 		}				public function get playerCount():int		{			var i:int = 0 ;			for each( var p:Player in players){ i++; }			return i;		}				private var _players:Dictionary = new Dictionary();		public function get players():Dictionary 		{			return _players; 		}				public function get playerScores():Array		{			var scores:Array = new Array();			for each(var p:Player in players)			{			 if(!p.knockedOut) scores.push(p.score);			}			scores = scores.sort(Array.NUMERIC | Array.DESCENDING);			return scores;		}				public function get score():int		{			var s:int = 0;			for each(var i:int in playerScores)			{				s += i;			}			return s;		}				/*--------------------------------------------------------------------------------------------------------		Display items--------------------------------------------------------------------------------------------------------*/		public var clusterItem:ClusterItem;		public var shellView:AgencyShellView;				/*--------------------------------------------------------------------------------------------------------		COLORS--------------------------------------------------------------------------------------------------------*/		public function get primaryColor():int		{			return Colors.collection[index];		}				public function get gradientColors():Array		{			return Colors.gradientCollection[index];		}				/*--------------------------------------------------------------------------------------------------------		Constructor--------------------------------------------------------------------------------------------------------*/		public function Agency($id:String, $index:int, $name:String, $players:Dictionary)		{			_id 		= $id;			_index		= $index;			_name 		= $name;			_players	= $players;						// Add event listeners to player(s)			for each(var p:Player in players)			{				p.addEventListener(PlayerEvent.KNOCKED_OUT, onPlayerKnockedOut);				p.addEventListener(PlayerEvent.UPDATE, onPlayerUpdate);			}						checkIfKnockedOut();		}				/*--------------------------------------------------------------------------------------------------------		Event Listeners--------------------------------------------------------------------------------------------------------*/		private function onPlayerKnockedOut($e:PlayerEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".","onPlayerKnockedOut($e:PlayerEvent)"));			checkIfKnockedOut();		}				private function onPlayerUpdate($e:PlayerEvent):void		{			//Debug.log(DEFAULT_NAME.concat(".","onPlayerUpdate($e:PlayerEvent)"));			checkIfKnockedOut();		}						/*--------------------------------------------------------------------------------------------------------		Functions--------------------------------------------------------------------------------------------------------*/		private function checkIfKnockedOut():void		{			//Debug.log(DEFAULT_NAME.concat(".","checkIfKnockedOut"));						if(knockedOut && !_knockedOutDispatched)			{				// Only dispatches on change				dispatchEvent(new AgencyEvent(AgencyEvent.KNOCKED_OUT, this));				_knockedOutDispatched = true;			}		}				override public function toString():String		{			var str:String 	= "---------------------- Agency: Start ----------------------";			str				= str.concat("\n", "knockedOut: ", knockedOut); 			str				= str.concat("\n", "id: ", id); 			str				= str.concat("\n", "index: ", index); 			str				= str.concat("\n", "name: ", name); 			str				= str.concat("\n", "playerCount: ", playerCount); 			str				= str.concat("\n", "---------------------- Agency: End ----------------------");			return str;		}	}}